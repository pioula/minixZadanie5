diff -rupNEZbB old/usr/src/minix/include/minix/callnr.h src/usr/src/minix/include/minix/callnr.h
--- old/usr/src/minix/include/minix/callnr.h	2022-06-07 20:52:56.517947606 +0200
+++ src/usr/src/minix/include/minix/callnr.h	2022-06-07 21:35:26.285761691 +0200
@@ -118,7 +118,8 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_NOTIFY		(VFS_BASE + 49)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		50	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff -rupNEZbB old/usr/src/minix/include/minix/ipc.h src/usr/src/minix/include/minix/ipc.h
--- old/usr/src/minix/include/minix/ipc.h	2022-06-07 20:53:17.386307796 +0200
+++ src/usr/src/minix/include/minix/ipc.h	2022-06-07 21:35:32.561969216 +0200
@@ -842,6 +842,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
 typedef struct {
+	int fd;
+	int event;
+
+	uint8_t data[48];
+} mess_lc_vfs_notify;
+_ASSERT_MSG_SIZE(mess_lc_vfs_notify);
+
+typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
 } mess_lc_vm_brk;
@@ -2121,6 +2129,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_notify	m_lc_vfs_notify;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff -rupNEZbB old/usr/src/minix/servers/vfs/const.h src/usr/src/minix/servers/vfs/const.h
--- old/usr/src/minix/servers/vfs/const.h	2022-06-07 20:56:52.192042193 +0200
+++ src/usr/src/minix/servers/vfs/const.h	2022-06-14 11:34:31.602984243 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_NOTIFY          8	/* # slots in notify table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
@@ -22,6 +23,7 @@
 #define FP_BLOCKED_ON_SELECT	4 /* susp'd on select */
 #define FP_BLOCKED_ON_OTHER	5 /* blocked on other process, check
 				     fp_task to find out */
+#define FP_BLOCKED_ON_NOTIFY_OPEN	6 /* blocked on open notify */
 
 /* test if the process is blocked on something */
 #define fp_is_blocked(fp)	((fp)->fp_blocked_on != FP_BLOCKED_ON_NONE)
diff -rupNEZbB old/usr/src/minix/servers/vfs/glo.h src/usr/src/minix/servers/vfs/glo.h
--- old/usr/src/minix/servers/vfs/glo.h	2022-06-14 19:22:30.533121621 +0200
+++ src/usr/src/minix/servers/vfs/glo.h	2022-06-14 19:24:05.569256614 +0200
@@ -17,6 +17,7 @@ EXTERN int reviving;		/* number of pipe
 EXTERN int pending;
 EXTERN int sending;
 EXTERN int verbose;
+EXTERN int listeners;       /* number of notify listeners */
 
 EXTERN dev_t ROOT_DEV;		/* device number of the root device */
 EXTERN int ROOT_FS_E;           /* kernel endpoint of the root FS proc */
diff -rupNEZbB old/usr/src/minix/servers/vfs/Makefile src/usr/src/minix/servers/vfs/Makefile
--- old/usr/src/minix/servers/vfs/Makefile	2022-06-07 20:56:45.419819611 +0200
+++ src/usr/src/minix/servers/vfs/Makefile	2022-06-07 21:36:45.384387067 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	notify.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB old/usr/src/minix/servers/vfs/notify.c src/usr/src/minix/servers/vfs/notify.c
--- old/usr/src/minix/servers/vfs/notify.c	1970-01-01 01:00:00.000000000 +0100
+++ src/usr/src/minix/servers/vfs/notify.c	2022-06-14 20:22:58.797094209 +0200
@@ -0,0 +1,26 @@
+#include <fcntl.h>
+#include <errno.h>
+
+#include "fs.h"
+#include "const.h"
+#include "file.h"
+#include "vnode.h"
+#include "glo.h"
+#include "scratchpad.h"
+
+int do_notify(void) {
+    int event = m_in.m_lc_vfs_notify.event;
+    if (event != NOTIFY_OPEN && event != NOTIFY_TRIOPEN &&
+        event != NOTIFY_CREATE && event != NOTIFY_MOVE)
+        return -EINVAL;
+
+    struct filp* filp = get_filp(m_in.m_lc_vfs_notify.fd, VNODE_NONE);
+    
+    if (listeners + 1 > NR_NOTIFY) {
+        return -ENONOTIFY;
+    }
+
+    scratch(fp).file.filp = filp;
+    suspend(FP_BLOCKED_ON_NOTIFY_OPEN);
+    return (SUSPEND);
+}
diff -rupNEZbB old/usr/src/minix/servers/vfs/open.c src/usr/src/minix/servers/vfs/open.c
--- old/usr/src/minix/servers/vfs/open.c	2022-06-11 09:31:08.215488928 +0200
+++ src/usr/src/minix/servers/vfs/open.c	2022-06-14 20:22:13.757092002 +0200
@@ -32,6 +32,7 @@ static char mode_map[] = {R_BIT, W_BIT,
 static struct vnode *new_node(struct lookup *resolve, int oflags,
 	mode_t bits);
 static int pipe_open(struct vnode *vp, mode_t bits, int oflags);
+static void wake_listeners(struct filp *filp);
 
 /*===========================================================================*
  *				do_open					     *
@@ -266,6 +267,9 @@ int common_open(char path[PATH_MAX], int
 	}
   }
 
+    if (r == OK && (oflags == 0)) {
+        wake_listeners(filp);
+    }
   unlock_filp(filp);
 
   /* If error, release inode. */
@@ -672,8 +676,8 @@ int do_close(void)
  *				close_fd				     *
  *===========================================================================*/
 int close_fd(rfp, fd_nr)
-struct fproc *rfp;
-int fd_nr;
+        struct fproc *rfp;
+        int fd_nr;
 {
 /* Perform the close(fd) system call. */
   register struct filp *rfilp;
@@ -711,3 +715,14 @@ int fd_nr;
 
   return(OK);
 }
+
+/*===========================================================================*
+ *				wake_listeners				     *
+ *===========================================================================*/
+void wake_listeners(filp)
+struct filp *filp;
+{
+  if (listeners > 0) {
+    release(filp->filp_vno, VFS_NOTIFY, listeners);
+  }
+}
\ No newline at end of file
diff -rupNEZbB old/usr/src/minix/servers/vfs/pipe.c src/usr/src/minix/servers/vfs/pipe.c
--- old/usr/src/minix/servers/vfs/pipe.c	2022-06-14 11:38:06.839122511 +0200
+++ src/usr/src/minix/servers/vfs/pipe.c	2022-06-14 20:48:33.801645568 +0200
@@ -304,6 +304,8 @@ void suspend(int why)
   if (why == FP_BLOCKED_ON_POPEN || why == FP_BLOCKED_ON_PIPE)
 	/* #procs susp'ed on pipe*/
 	susp_count++;
+  if (why == FP_BLOCKED_ON_NOTIFY_OPEN)
+	listeners++;
 
   fp->fp_blocked_on = why;
   assert(fp->fp_grant == GRANT_INVALID || !GRANT_VALID(fp->fp_grant));
@@ -369,7 +371,7 @@ void unsuspend_by_endpt(endpoint_t proc_
  *===========================================================================*/
 void release(vp, op, count)
 register struct vnode *vp;	/* inode of pipe */
-int op;				/* VFS_READ, VFS_WRITE, or VFS_OPEN */
+int op;				/* VFS_READ, VFS_WRITE, VFS_OPEN or VFS_NOTIFY */
 int count;			/* max number of processes to release */
 {
 /* Check to see if any process is hanging on vnode 'vp'. If one is, and it
@@ -416,7 +417,8 @@ int count;			/* max number of processes
 				continue;
 			if (rp->fp_filp[scratch(rp).file.fd_nr]->filp_vno != vp)
 				continue;
-		} else if (rp->fp_blocked_on == FP_BLOCKED_ON_PIPE) {
+		} else if (rp->fp_blocked_on == FP_BLOCKED_ON_PIPE || 
+			rp->fp_blocked_on == FP_BLOCKED_ON_NOTIFY_OPEN) {
 			if (scratch(rp).file.filp == NULL)
 				continue;
 			if (scratch(rp).file.filp->filp_vno != vp)
@@ -424,11 +426,19 @@ int count;			/* max number of processes
 		} else
 			continue;
 
+		int blocked_on = rp->fp_blocked_on;
 		/* We found the vnode. Revive process. */
 		revive(rp->fp_endpoint, 0);
+		if (blocked_on == FP_BLOCKED_ON_NOTIFY_OPEN) {
+			listeners--;
+			if(listeners < 0)
+				panic("listeners now negative: %d", listeners);
+		}
+		else {
 		susp_count--;	/* keep track of who is suspended */
 		if(susp_count < 0)
 			panic("susp_count now negative: %d", susp_count);
+		}
 		if (--count == 0) return;
 	}
   }
@@ -470,6 +479,9 @@ void revive(endpoint_t proc_e, int retur
 	if (blocked_on == FP_BLOCKED_ON_POPEN) {
 		/* process blocked in open or create */
 		replycode(proc_e, fd_nr);
+	} else if (blocked_on == FP_BLOCKED_ON_NOTIFY_OPEN) {
+		scratch(rfp).file.filp = NULL;
+		replycode(proc_e, returned);
 	} else if (blocked_on == FP_BLOCKED_ON_SELECT) {
 		replycode(proc_e, returned);
 	} else {
diff -rupNEZbB old/usr/src/minix/servers/vfs/proto.h src/usr/src/minix/servers/vfs/proto.h
--- old/usr/src/minix/servers/vfs/proto.h	2022-06-14 19:49:46.356055155 +0200
+++ src/usr/src/minix/servers/vfs/proto.h	2022-06-14 19:50:14.788076821 +0200
@@ -348,4 +348,8 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* notify.c */
+int do_notify(void);
+
 #endif
diff -rupNEZbB old/usr/src/minix/servers/vfs/table.c src/usr/src/minix/servers/vfs/table.c
--- old/usr/src/minix/servers/vfs/table.c	2022-06-07 20:57:36.093531325 +0200
+++ src/usr/src/minix/servers/vfs/table.c	2022-06-07 21:37:09.213181982 +0200
@@ -65,4 +65,5 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_NOTIFY)	= do_notify,		/* notify() */
 };
diff -rupNEZbB old/usr/src/sys/sys/errno.h src/usr/src/sys/sys/errno.h
--- old/usr/src/sys/sys/errno.h	2022-06-07 20:58:38.543769000 +0200
+++ src/usr/src/sys/sys/errno.h	2022-06-07 21:37:42.474294372 +0200
@@ -172,7 +172,9 @@
 #define	ENOLINK		(_SIGN 95 )		/* Link has been severed */
 #define	EPROTO		(_SIGN 96 )		/* Protocol error */
 
-#define	ELAST		(_SIGN 96 )		/* Must equal largest errno */
+#define	ENONOTIFY		(_SIGN 97 )		/* No more notifications available */
+
+#define	ELAST		(_SIGN 97 )		/* Must equal largest errno */
 
 #if defined(_KERNEL) || defined(_KMEMUSER)
 /* pseudo-errors returned inside kernel to modify return to process */
diff -rupNEZbB old/usr/src/sys/sys/fcntl.h src/usr/src/sys/sys/fcntl.h
--- old/usr/src/sys/sys/fcntl.h	2022-06-07 20:58:52.252276209 +0200
+++ src/usr/src/sys/sys/fcntl.h	2022-06-07 21:37:50.746571523 +0200
@@ -301,6 +301,14 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Event flags used by notify()
+ */
+#define	NOTIFY_OPEN	0x00000001	/* file is opened */
+#define	NOTIFY_TRIOPEN	0x00000002	/* file is opened >= 3 times simultaneously */
+#define	NOTIFY_CREATE	0x00000004	/* file is created in the directory */
+#define	NOTIFY_MOVE	0x00000008	/* file is moved to the directory */
+
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>

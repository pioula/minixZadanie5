diff -rupNEZbB old/usr/src/minix/include/minix/callnr.h src/usr/src/minix/include/minix/callnr.h
--- old/usr/src/minix/include/minix/callnr.h	2022-06-07 20:52:56.517947606 +0200
+++ src/usr/src/minix/include/minix/callnr.h	2022-06-07 21:35:26.285761691 +0200
@@ -118,7 +118,8 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_NOTIFY		(VFS_BASE + 49)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		50	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff -rupNEZbB old/usr/src/minix/include/minix/ipc.h src/usr/src/minix/include/minix/ipc.h
--- old/usr/src/minix/include/minix/ipc.h	2022-06-07 20:53:17.386307796 +0200
+++ src/usr/src/minix/include/minix/ipc.h	2022-06-07 21:35:32.561969216 +0200
@@ -842,6 +842,14 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
 typedef struct {
+	int fd;
+	int event;
+
+	uint8_t data[48];
+} mess_lc_vfs_notify;
+_ASSERT_MSG_SIZE(mess_lc_vfs_notify);
+
+typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
 } mess_lc_vm_brk;
@@ -2121,6 +2129,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+		mess_lc_vfs_notify	m_lc_vfs_notify;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff -rupNEZbB old/usr/src/minix/servers/vfs/const.h src/usr/src/minix/servers/vfs/const.h
--- old/usr/src/minix/servers/vfs/const.h	2022-06-07 20:56:52.192042193 +0200
+++ src/usr/src/minix/servers/vfs/const.h	2022-06-07 21:36:51.616594801 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_NOTIFY          8	/* # slots in notify table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
diff -rupNEZbB old/usr/src/minix/servers/vfs/filedes.c src/usr/src/minix/servers/vfs/filedes.c
--- old/usr/src/minix/servers/vfs/filedes.c	2022-06-11 09:30:51.543197422 +0200
+++ src/usr/src/minix/servers/vfs/filedes.c	2022-06-11 15:59:57.239669010 +0200
@@ -240,6 +239,29 @@ void invalidate_filp_by_endpt(endpoint_t
 }
 
 /*===========================================================================*
+ *				wake_listeners				     *
+ *===========================================================================*/
+void wake_listeners(filp)
+struct filp *filp;
+{
+  struct vnode* vnode = filp->filp_vno;
+  if (mutex_trylock(&vnode->notify_lock) != 0)
+    panic("notify mutex should be free");
+
+  if (vnode->listeners_count > 0)
+    printf("Listeners %d\n", vnode->listeners_count);
+  while (vnode->listeners_count > 0) {
+    if (cond_wait(&vnode->for_locker, &vnode->notify_lock) != 0)
+      panic("unable to wait on for_locker");
+  }
+  vnode->listeners_count = vnode->failed_listeners_count;
+  vnode->failed_listeners_count = 0;
+
+  if (mutex_unlock(&vnode->notify_lock) != 0)
+    panic("unable to release lock on notify");
+}
+
+/*===========================================================================*
  *				lock_filp				     *
  *===========================================================================*/
 void lock_filp(filp, locktype)
@@ -290,6 +312,7 @@ tll_access_t locktype;
 void unlock_filp(filp)
 struct filp *filp;
 {
+  // puts("UNLOCK");
   /* If this filp holds a soft lock on the vnode, we must be the owner */
   if (filp->filp_softlock != NULL)
 	assert(filp->filp_softlock == fp);
@@ -307,6 +330,7 @@ struct filp *filp;
   filp->filp_softlock = NULL;
   if (mutex_unlock(&filp->filp_lock) != 0)
 	panic("unable to release lock on filp");
+  // puts("KONIEC UNLOCK");
 }
 
 /*===========================================================================*
diff -rupNEZbB old/usr/src/minix/servers/vfs/Makefile src/usr/src/minix/servers/vfs/Makefile
--- old/usr/src/minix/servers/vfs/Makefile	2022-06-07 20:56:45.419819611 +0200
+++ src/usr/src/minix/servers/vfs/Makefile	2022-06-07 21:36:45.384387067 +0200
@@ -7,7 +7,8 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c \
+	notify.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB old/usr/src/minix/servers/vfs/notify.c src/usr/src/minix/servers/vfs/notify.c
--- old/usr/src/minix/servers/vfs/notify.c	1970-01-01 01:00:00.000000000 +0100
+++ src/usr/src/minix/servers/vfs/notify.c	2022-06-11 15:16:12.019441258 +0200
@@ -0,0 +1,68 @@
+#include <fcntl.h>
+#include <errno.h>
+
+#include "fs.h"
+#include "const.h"
+#include "file.h"
+#include "vnode.h"
+
+int do_notify(void) {
+    printf("WCHODZE %d\n", m_in.m_lc_vfs_notify.fd);
+    int event = m_in.m_lc_vfs_notify.event;
+    if (event != NOTIFY_OPEN && event != NOTIFY_TRIOPEN &&
+        event != NOTIFY_CREATE && event != NOTIFY_MOVE)
+        return EINVAL;
+
+    printf("POPRAWNY KOMUNIKAT\n");
+    struct filp* filp = get_filp(m_in.m_lc_vfs_notify.fd, VNODE_NONE);
+    struct vnode* vnode = filp->filp_vno;
+    printf("MAM VNODE\n");
+
+    if (mutex_lock(&vnode->notify_lock) != 0)
+        panic("unable to lock mutex");
+    printf("MAM LOCKA %d\n", vnode->listeners_count);
+
+    if (vnode->listeners_count >= NR_NOTIFY)
+        return ENONOTIFY;
+
+    vnode->listeners_count++;
+    printf("MALO LOCKOW %d\n", vnode->listeners_count);
+    if (cond_wait(&vnode->for_listeners, &vnode->notify_lock) != 0)
+        panic("unable to wait on notify_lock");
+    vnode->listeners_count--;
+
+    printf("OBUDZILI MNIE!\n");
+
+    switch (event) {
+        case NOTIFY_OPEN: {
+            printf("OPEN\n");
+            int listeners_count = vnode->listeners_count;
+            if (mutex_unlock(&vnode->notify_lock) != 0)
+                panic("unable to unlock mutex");
+            printf("OTWARLEM MUTEXA I BUDZE\n");
+            if (listeners_count > 0) {
+                printf("BUDZE SWOICH\n");
+                if (cond_signal(&vnode->for_listeners) != 0)
+                    panic("unable to signal");
+            }
+            else {
+                printf("BUDZE LOCKERA\n");
+                if (cond_signal(&vnode->for_locker) != 0)
+                    panic("unable to signal");
+            }
+
+            return 0;
+        }
+        case NOTIFY_TRIOPEN: {
+
+        }
+        case NOTIFY_CREATE: {
+
+        }
+        case NOTIFY_MOVE: {
+
+        }
+    }
+
+	return(ENOSYS);  // TODO: implementacja VFS_NOTIFY
+}
diff -rupNEZbB old/usr/src/minix/servers/vfs/open.c src/usr/src/minix/servers/vfs/open.c
--- old/usr/src/minix/servers/vfs/open.c	2022-06-11 09:31:08.215488928 +0200
+++ src/usr/src/minix/servers/vfs/open.c	2022-06-11 15:57:05.738038174 +0200
@@ -266,6 +266,9 @@ int common_open(char path[PATH_MAX], int
 	}
   }
 
+    if (r == OK && (oflags == 0)) {
+        wake_listeners(filp);
+    }
   unlock_filp(filp);
 
   /* If error, release inode. */
@@ -672,8 +675,8 @@ int do_close(void)
  *				close_fd				     *
  *===========================================================================*/
 int close_fd(rfp, fd_nr)
-struct fproc *rfp;
-int fd_nr;
+        struct fproc *rfp;
+        int fd_nr;
 {
 /* Perform the close(fd) system call. */
   register struct filp *rfilp;
diff -rupNEZbB old/usr/src/minix/servers/vfs/proto.h src/usr/src/minix/servers/vfs/proto.h
--- old/usr/src/minix/servers/vfs/proto.h	2022-06-07 20:57:18.604928936 +0200
+++ src/usr/src/minix/servers/vfs/proto.h	2022-06-09 15:49:33.169863524 +0200
@@ -74,6 +74,7 @@ struct filp *get_filp(int fild, tll_acce
 struct filp *get_filp2(struct fproc *rfp, int fild, tll_access_t locktype);
 void lock_filp(struct filp *filp, tll_access_t locktype);
 void unlock_filp(struct filp *filp);
+void wake_listeners(struct filp *filp);
 void unlock_filps(struct filp *filp1, struct filp *filp2);
 void invalidate_filp(struct filp *);
 void invalidate_filp_by_endpt(endpoint_t proc_e);
@@ -348,4 +349,8 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* notify.c */
+int do_notify(void);
+
 #endif
diff -rupNEZbB old/usr/src/minix/servers/vfs/table.c src/usr/src/minix/servers/vfs/table.c
--- old/usr/src/minix/servers/vfs/table.c	2022-06-07 20:57:36.093531325 +0200
+++ src/usr/src/minix/servers/vfs/table.c	2022-06-07 21:37:09.213181982 +0200
@@ -65,4 +65,5 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+	CALL(VFS_NOTIFY)	= do_notify,		/* notify() */
 };
diff -rupNEZbB old/usr/src/minix/servers/vfs/vnode.c src/usr/src/minix/servers/vfs/vnode.c
--- old/usr/src/minix/servers/vfs/vnode.c	2022-06-11 15:21:47.090169603 +0200
+++ src/usr/src/minix/servers/vfs/vnode.c	2022-06-11 15:23:02.570784911 +0200
@@ -145,6 +145,14 @@ void init_vnodes(void)
 	vp->v_fs_count = 0;
 	vp->v_mapfs_count = 0;
 	tll_init(&vp->v_lock);
+  if (cond_init(&vp->for_locker, NULL) != 0)
+    panic("Failed to initialize for_locker condition variable");
+  if (cond_init(&vp->for_listeners, NULL) != 0)
+    panic("Failed to initialize for_listeners condition variable");
+  if (mutex_init(&vp->notify_lock, NULL) != 0)
+    panic("Failed to initialize notify mutex");
+  vp->listeners_count = 0;
+  vp->failed_listeners_count = 0;
   }
 }
 
diff -rupNEZbB old/usr/src/minix/servers/vfs/vnode.h src/usr/src/minix/servers/vfs/vnode.h
--- old/usr/src/minix/servers/vfs/vnode.h	2022-06-11 15:00:29.531852588 +0200
+++ src/usr/src/minix/servers/vfs/vnode.h	2022-06-11 15:13:07.841944892 +0200
@@ -20,6 +20,14 @@ EXTERN struct vnode {
   dev_t v_sdev;                 /* device number for special files */
   struct vmnt *v_vmnt;          /* vmnt object of the partition */
   tll_t v_lock;			/* three-level-lock */
+  
+  /* following are for do_notify() */
+  mutex_t notify_lock; /* Mutex for notify. */
+  cond_t for_locker;    /* Wait for listeners to process new file state */
+  cond_t for_listeners; /* Wait for a new event */
+  int listeners_count;      /* Number of event listeners */
+  int failed_listeners_count; /* Number of event listeners
+                                 that has failed condition */
 } vnode[NR_VNODES];
 
 /* vnode lock types mapping */
diff -rupNEZbB old/usr/src/sys/sys/errno.h src/usr/src/sys/sys/errno.h
--- old/usr/src/sys/sys/errno.h	2022-06-07 20:58:38.543769000 +0200
+++ src/usr/src/sys/sys/errno.h	2022-06-07 21:37:42.474294372 +0200
@@ -172,7 +172,9 @@
 #define	ENOLINK		(_SIGN 95 )		/* Link has been severed */
 #define	EPROTO		(_SIGN 96 )		/* Protocol error */
 
-#define	ELAST		(_SIGN 96 )		/* Must equal largest errno */
+#define	ENONOTIFY		(_SIGN 97 )		/* No more notifications available */
+
+#define	ELAST		(_SIGN 97 )		/* Must equal largest errno */
 
 #if defined(_KERNEL) || defined(_KMEMUSER)
 /* pseudo-errors returned inside kernel to modify return to process */
diff -rupNEZbB old/usr/src/sys/sys/fcntl.h src/usr/src/sys/sys/fcntl.h
--- old/usr/src/sys/sys/fcntl.h	2022-06-07 20:58:52.252276209 +0200
+++ src/usr/src/sys/sys/fcntl.h	2022-06-07 21:37:50.746571523 +0200
@@ -301,6 +301,14 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Event flags used by notify()
+ */
+#define	NOTIFY_OPEN	0x00000001	/* file is opened */
+#define	NOTIFY_TRIOPEN	0x00000002	/* file is opened >= 3 times simultaneously */
+#define	NOTIFY_CREATE	0x00000004	/* file is created in the directory */
+#define	NOTIFY_MOVE	0x00000008	/* file is moved to the directory */
+
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>
